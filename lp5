===========================================Задание 1

import numpy as np
import matplotlib.pyplot as plt


# Пишем фунцкию и возвращаем ее значение
def my_hard_foo(x):
    return np.sin(x) ** 3 + np.cos(x) ** 3 / (np.exp(x) + 1)


# Далее задаю координаты для точки Х с помощьб метода linspace, а Y возращаю из функции
X = np.linspace(-5, 5, 100)
Y = my_hard_foo(X)

# Функция плот для построения графика, передаем ей Х и Y.
# Так же задаем атрибут linestyle и зеленый цвет, alpha задает прозрачность
plt.plot(X, Y, linestyle='--', color='g', alpha=0.4)

# Задаю названия осей
plt.xlabel('Ось X')
plt.ylabel('Ось Y')

plt.title('График сложной алгебраической функции')  # Задаю название для графика

plt.grid(True)  # Значение True у фунцкии grid позволяет добавить сеточку на график
plt.text(0, 1, "Вот такая моя функция", ha='center')    # Добавляю подпись по центру по координатам 0 и 1 и выравнивываю по центру.
plt.show() # Строю(вывожу) сам график


# Чуть-чуть поигрался :D
def my_love_foo():
    t = np.linspace(0, 2 * np.pi, 100)
    x = 16 * np.sin(t) ** 3
    y = 13 * np.cos(t) - 5 * np.cos(2 * t) - 2 * np.cos(3 * t) - np.cos(4 * t)

    plt.plot(x, y, linestyle='-', color='r', label='love')
    plt.show()

================================================================Задание 2 

import numpy as np
import matplotlib.pyplot as plt

# Далее задаю координаты для точек Х Y
X = np.random.normal(0, 1, 3000)
Y = np.random.normal(3, 4, 3000)

# Функция плот для построения графика, передаем ей Х и Y.
# Так же задаем атрибут s=размер, c=цвет, alpha задает прозрачность, а marker=маркер
plt.scatter(X, Y, s=30, c='red', alpha=0.2, marker='<')

# Задаю названия осей
plt.xlabel('Ось X')
plt.ylabel('Ось Y')

plt.title('Мой точечный график')  # Задаю название для графика

plt.grid(True)  # Значение True у фунцкии grid позволяет добавить сеточку на график
plt.show() # Строю(вывожу) сам график

=============================================================Задание 3

import numpy as np
import matplotlib.pyplot as plt


data = np.random.normal(16, 2, 1000)


plt.hist(data, color='red', alpha=0.5, bins=30)

# Задаю названия осей
plt.xlabel('Время в секундах')
plt.ylabel('Дистанция')

plt.title('Школьный забег')  # Задаю название для графика

plt.grid(True)  # Значение True у фунцкии grid позволяет добавить сеточку на график
plt.show() # Строю(вывожу) сам график

===============================================================ВЫВОД:
Исходя из гистограммы, можно сделать вывод, что большинство школьников завершили забег за 100 метров примерно за 16-18 секунд, 
что соответствует среднему значению и стандартному отклонению, заданным при генерации данных. 
Также можно увидеть, что результаты распределены нормально, с небольшим количеством школьников, 
завершивших забег за время значительно меньшее или большее среднего значения.
